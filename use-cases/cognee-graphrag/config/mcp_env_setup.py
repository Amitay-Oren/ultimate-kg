#!/usr/bin/env python3
"""
MCP Environment Setup Helper for Cognee GraphRAG.

This script helps configure the environment for the Cognee MCP server
with the specified database configuration (Neo4j, LanceDB, SQLite).
"""

import os
import json
from pathlib import Path
from typing import Dict, Any, Optional


def create_mcp_env_file(
    cognee_mcp_path: Path,
    api_key: str,
    neo4j_password: str = "password123",
    **kwargs
) -> bool:
    """Create .env file for Cognee MCP server."""
    
    env_content = f"""# Cognee MCP Server Configuration
# Generated by mcp_env_setup.py

# Required: LLM API Key
LLM_API_KEY={api_key}

# Database Providers
VECTOR_DB_PROVIDER=lancedb
GRAPH_DATABASE_PROVIDER=neo4j
DB_PROVIDER=sqlite

# Neo4j Configuration
GRAPH_DATABASE_URL=bolt://localhost:7687
GRAPH_DATABASE_USERNAME=neo4j
GRAPH_DATABASE_PASSWORD={neo4j_password}

# Embedding Configuration
EMBEDDING_PROVIDER=fastembed
EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
EMBEDDING_DIMENSIONS=384
EMBEDDING_MAX_TOKENS=256

# Environment
ENV=local
LOG_LEVEL=INFO
"""
    
    # Add any additional environment variables
    for key, value in kwargs.items():
        env_content += f"{key}={value}\n"
    
    env_file = cognee_mcp_path / ".env"
    env_file.write_text(env_content)
    
    print(f"‚úÖ Created MCP environment file: {env_file}")
    return True


def create_claude_settings(
    cognee_mcp_path: Path,
    output_path: Optional[Path] = None
) -> Path:
    """Create Claude Code MCP settings configuration."""
    
    settings = {
        "mcpServers": {
            "cognee": {
                "command": "uv",
                "args": ["run", "python", "src/server.py"],
                "cwd": str(cognee_mcp_path.resolve()),
                "env": {
                    "LLM_API_KEY": "${OPENAI_API_KEY}",
                    "VECTOR_DB_PROVIDER": "lancedb",
                    "GRAPH_DATABASE_PROVIDER": "neo4j",
                    "DB_PROVIDER": "sqlite"
                }
            }
        }
    }
    
    if output_path is None:
        output_path = Path.cwd() / "claude_mcp_settings.json"
    
    output_path.write_text(json.dumps(settings, indent=2))
    
    print(f"‚úÖ Created Claude Code settings: {output_path}")
    return output_path


def validate_environment(cognee_mcp_path: Path) -> Dict[str, bool]:
    """Validate the MCP server environment setup."""
    
    results = {}
    
    # Check if Cognee MCP directory exists
    results["cognee_mcp_exists"] = cognee_mcp_path.exists()
    
    # Check if .env file exists
    env_file = cognee_mcp_path / ".env"
    results["env_file_exists"] = env_file.exists()
    
    # Check if src/server.py exists
    server_file = cognee_mcp_path / "src" / "server.py"
    results["server_file_exists"] = server_file.exists()
    
    # Check if API key is set
    if env_file.exists():
        env_content = env_file.read_text()
        results["api_key_configured"] = "LLM_API_KEY=" in env_content and "your_" not in env_content
    else:
        results["api_key_configured"] = False
    
    return results


def print_setup_status(cognee_mcp_path: Path):
    """Print the current setup status."""
    
    print("üîç MCP Environment Setup Status")
    print("=" * 35)
    
    validation_results = validate_environment(cognee_mcp_path)
    
    status_messages = {
        "cognee_mcp_exists": f"Cognee MCP directory: {cognee_mcp_path}",
        "env_file_exists": "Environment file (.env)",
        "server_file_exists": "MCP server script",
        "api_key_configured": "API key configuration"
    }
    
    for check, message in status_messages.items():
        status = "‚úÖ" if validation_results.get(check, False) else "‚ùå"
        print(f"{status} {message}")
    
    return all(validation_results.values())


def setup_interactive():
    """Interactive setup for MCP environment."""
    
    print("üöÄ Interactive MCP Environment Setup")
    print("=" * 40)
    
    # Get Cognee MCP path
    default_path = Path.home() / "cognee" / "cognee-mcp"
    cognee_path_input = input(f"Cognee MCP path [{default_path}]: ").strip()
    cognee_mcp_path = Path(cognee_path_input) if cognee_path_input else default_path
    
    if not cognee_mcp_path.exists():
        print(f"‚ùå Path does not exist: {cognee_mcp_path}")
        print("Please clone Cognee first:")
        print("git clone https://github.com/topoteretes/cognee.git")
        return False
    
    # Get API key
    api_key = os.getenv("OPENAI_API_KEY") or os.getenv("LLM_API_KEY")
    if not api_key:
        api_key = input("Enter your OpenAI API key: ").strip()
        if not api_key:
            print("‚ùå API key is required")
            return False
    
    # Get Neo4j password
    neo4j_password = input("Neo4j password [password123]: ").strip() or "password123"
    
    # Create environment file
    create_mcp_env_file(cognee_mcp_path, api_key, neo4j_password)
    
    # Create Claude settings
    settings_path = create_claude_settings(cognee_mcp_path)
    
    # Print final status
    print("\nüéâ Setup Complete!")
    print("=" * 20)
    print(f"üìÅ MCP Environment: {cognee_mcp_path / '.env'}")
    print(f"ü§ñ Claude Settings: {settings_path}")
    
    print("\nüìã Next Steps:")
    print("1. Add the Claude settings to your Claude Code settings.json")
    print("2. Start Neo4j: docker run -d --name neo4j-cognee -p 7474:7474 -p 7687:7687 -e NEO4J_AUTH=neo4j/password123 neo4j:latest")
    print(f"3. Start MCP server: cd {cognee_mcp_path} && uv run src/server.py")
    print("4. Test in Claude Code: 'List available MCP tools'")
    
    return True


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "--interactive":
        setup_interactive()
    else:
        # Show status for default path
        default_path = Path.home() / "cognee" / "cognee-mcp"
        if default_path.exists():
            print_setup_status(default_path)
        else:
            print("‚ùå Cognee MCP not found at default location")
            print("Run with --interactive flag for guided setup")