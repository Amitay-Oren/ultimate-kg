# Docker Compose for Agentic GraphRAG System
version: '3.8'

services:
  # Neo4j Database for Knowledge Graph
  neo4j:
    image: neo4j:5.15
    container_name: agentic-graphrag-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_db_tx__log_rotation_retention__policy=3 days
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - agentic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Cognee MCP Server (if not running separately)
  cognee-mcp:
    image: cognee/mcp-server:latest
    container_name: agentic-graphrag-cognee
    ports:
      - "8000:8000"
    environment:
      - LLM_API_KEY=${LLM_API_KEY}
      - GRAPH_DATABASE_PROVIDER=neo4j
      - VECTOR_DB_PROVIDER=lancedb
      - DB_PROVIDER=sqlite
      - GRAPH_DATABASE_URL=bolt://neo4j:7687
      - GRAPH_DATABASE_USERNAME=neo4j
      - GRAPH_DATABASE_PASSWORD=password123
      - EMBEDDING_PROVIDER=fastembed
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
    volumes:
      - cognee_data:/app/data
    networks:
      - agentic-network
    depends_on:
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Main Agentic GraphRAG System
  agentic-graphrag:
    build: .
    container_name: agentic-graphrag-main
    ports:
      - "8080:8080"  # A2A Server
      - "9090:9090"  # Metrics
    environment:
      # A2A Server Configuration
      - A2A_SERVER_HOST=0.0.0.0
      - A2A_SERVER_PORT=8080
      - A2A_NETWORK_MODE=production
      - A2A_MAX_CONCURRENT_REQUESTS=100
      - A2A_ENABLE_METRICS=true
      - A2A_METRICS_PORT=9090
      
      # Google Cloud Configuration
      #- GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      #- VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION:-us-central1}
      #- GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account.json
      #- ADK_MODEL=${ADK_MODEL:-gemini-2.0-flash}
      
      # MCP Configuration
      - MCP_SERVER_URL=http://cognee-mcp:8000/sse
      - MCP_SERVER_TIMEOUT=30
      
      # Cognee Configuration
      - LLM_API_KEY=${LLM_API_KEY}
      - GRAPH_DATABASE_PROVIDER=neo4j
      - GRAPH_DATABASE_URL=bolt://neo4j:7687
      - GRAPH_DATABASE_USERNAME=neo4j
      - GRAPH_DATABASE_PASSWORD=CuriousGeorge23
      
      # Notification Configuration
      - NOTIFICATION_THRESHOLD=${NOTIFICATION_THRESHOLD:-0.7}
      - NOTIFICATION_CHANNELS=console,file
      - WEBHOOK_URL=${WEBHOOK_URL}
      
      # Environment
      - ENV=production
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      #- ${GOOGLE_APPLICATION_CREDENTIALS}:/app/credentials/service-account.json:ro
    networks:
      - agentic-network
    depends_on:
      neo4j:
        condition: service_healthy
      cognee-mcp:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/agents/kg_status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-graphrag-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - agentic-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-graphrag-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - agentic-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  agentic-network:
    driver: bridge
    name: agentic-graphrag-network

volumes:
  # Neo4j volumes
  neo4j_data:
    name: agentic-graphrag-neo4j-data
  neo4j_logs:
    name: agentic-graphrag-neo4j-logs
  neo4j_import:
    name: agentic-graphrag-neo4j-import
  neo4j_plugins:
    name: agentic-graphrag-neo4j-plugins
  
  # Cognee volumes
  cognee_data:
    name: agentic-graphrag-cognee-data
  
  # Monitoring volumes
  prometheus_data:
    name: agentic-graphrag-prometheus-data
  grafana_data:
    name: agentic-graphrag-grafana-data